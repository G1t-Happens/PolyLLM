spring.application.name=polyllm
server.port=8089

# Database settings (postgres)
# For production environments, avoid hardcoding DB passwords here.
# Instead, use environment variables or secret management tools to securely inject credentials.
spring.datasource.url=${DB_URL}
spring.datasource.username=${DB_USER}
spring.datasource.password=${DB_PASSWORD}

# Hibernate settings
# In production, use 'validate' for 'spring.jpa.hibernate.ddl-auto' instead of 'update' or 'create'.
# This prevents Hibernate from making unintended schema changes and helps ensure database integrity.
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.jdbc.time_zone=UTC

# Connection Pool (optional tuning)
# Adjust pool size based on expected concurrency and resource availability.
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.minimum-idle=5

# Logging
logging.level.com.polyllm=ERROR
logging.file.name=logs/polyllm.log

# Additional recommendations:
# - Consider configuring logging.pattern.file for better log formatting.
# - For time zones, always ensure JVM and DB time zones are aligned to avoid datetime bugs.
# - For high availability, consider connection validation and retry configs for the datasource.
